{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","brand_name","type","id","navbars","map","navbar","i","navname","onClick","toggleMode","htmlFor","name","onChange","colorHandle","defaultProps","TextForm","useState","text","setText","style","color","heading","rows","placeholder","value","e","target","backgroundColor","textareaColor","toUpperCase","showAlert","toLowerCase","newText","split","join","myTextBox","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","length","trim","toFixed","Alert","alert","align","float","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","themeColor","setThemeColor","setTextareaColor","useEffect","cookie","forEach","saved_cookie","body","console","log","message","setTimeout","title","setInterval","seletedColor","randomColorCode","hashRemovedSelectedColor","substr","Math","floor","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+XAIe,SAASA,EAAOC,GAC7B,OACE,qBACEC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MADtE,SAGE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SACGH,EAAMI,aAET,wBACEH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SAOGM,EAAO,QAAYC,KAAI,SAACC,EAAQC,GAE/B,OACE,oBAAIT,UAAU,WAAd,SACE,mBAAGA,UAAU,WAAWE,KAAMM,EAAON,KAArC,SACGM,EAAOE,WAFkBD,QAQpC,uBAAMT,UAAU,SAAhB,UAIE,sBAAKA,UAAS,sCAA8C,UAAbD,EAAME,KAAgB,OAAO,SAA5E,UACE,uBACED,UAAU,mBACVI,KAAK,WACLC,GAAG,yBACLM,QAASZ,EAAMa,aACf,uBAAOZ,UAAU,mBAAmBa,QAAQ,yBAA5C,SACgB,UAAbd,EAAME,KAAe,mBAAmB,yBAI7B,SAAfF,EAAME,KAAiB,uBAAOG,KAAK,QAAQU,KAAK,YAAYT,GAAG,YAAYL,UAAU,OAAOe,SAAUhB,EAAMiB,cAAe,gBAYxIlB,EAAOmB,aAAe,CACpBd,WAAY,YCrEd,IA0Fee,EA1FE,SAACnB,GACf,MAAwBoB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA4DD,OACE,qCACA,sBAAKrB,UAAU,kBAAkBsB,MAAO,CAACC,MAAqB,SAAfxB,EAAME,KAAiB,QAAQ,SAA9E,UACE,6BAAKF,EAAMyB,UACX,qBAAKxB,UAAU,OAAf,SACE,0BACEA,UAAU,eACVK,GAAG,YACHoB,KAAK,IAAIC,YAAY,kBAAkBC,MAAOP,EAAML,SAlEpC,SAACa,GAEvBP,EAAQO,EAAEC,OAAOF,QAiEXL,MAAO,CAACQ,gBAA+B,UAAf/B,EAAME,KAAkB,QAAQF,EAAMgC,cAAeR,MAAqB,SAAfxB,EAAME,KAAiB,QAAQ,aAGtH,qBAAKD,UAAU,4BAA4BW,QAjEtB,WAET,KAATS,GACDC,EAAQD,EAAKY,eACbjC,EAAMkC,UAAU,wBAAwB,YAExClC,EAAMkC,UAAU,wDAAwD,YA2D1E,uBACA,qBAAKjC,UAAU,8BAA8BW,QAxDxB,WACT,KAATS,GACDC,EAAQD,EAAKc,eACbnC,EAAMkC,UAAU,wBAAwB,YAExClC,EAAMkC,UAAU,wDAAwD,YAmD1E,uBACA,qBAAKjC,UAAU,4BAA4BW,QAhDnB,WAE1B,GAAY,KAATS,EAAY,CAKb,IAAIe,EAAUf,EAAKgB,MAAM,QACzBf,EAAQc,EAAQE,KAAK,MAErBtC,EAAMkC,UAAU,kCAAkC,gBAElDlC,EAAMkC,UAAU,sDAAsD,YAoCtE,+BACA,qBAAKjC,UAAU,yBAAyBW,QAhCnB,WACtBU,EAAQ,IACRtB,EAAMkC,UAAU,oBAAoB,YA8BnC,wBACA,qBAAKjC,UAAU,2BAA2BW,QA5BtB,WACtB,GAAY,KAATS,EAAY,CACb,IAAIkB,EAAYC,SAASC,eAAe,aACxCF,EAAUG,SACVH,EAAUI,kBAAkB,EAAG,OAC/BC,UAAUC,UAAUC,UAAUP,EAAUX,OACxC5B,EAAMkC,UAAU,eAAe,gBAE/BlC,EAAMkC,UAAU,wCAAwC,YAoBxD,0BAGF,sBAAKjC,UAAU,iBAAiBsB,MAAO,CAACC,MAAqB,SAAfxB,EAAME,KAAiB,QAAQ,SAA7E,UACE,mDACA,8BAAImB,EAAKgB,MAAM,KAAKU,OAAO,EAAE,EAAE1B,EAAK2B,OAAOX,MAAM,KAAKU,OAAtD,WAAsE1B,EAAK0B,OAA3E,iBACA,8BAAI1B,EAAKgB,MAAM,KAAKU,OAAS,EAAG,GAAG,KAAQ1B,EAAKgB,MAAM,KAAKU,QAAQE,QAAQ,GAA3E,gBACA,6BAAK5B,EAAK0B,OAAO,EAAG1B,EAAK,6DCxEhB6B,EAZD,SAAClD,GAKb,OACEA,EAAMmD,OAAS,sBAAKlD,UAAS,2BAAsBD,EAAMmD,MAAM9C,KAAlC,+CAAqF+C,MAAM,QAAQ7B,MAAO,CAAC8B,MAAO,SAAUC,KAAK,QAA/I,UACb,mCANgB,SAACC,GACjB,IAAMC,EAAQD,EAAKpB,cACnB,OAAOqB,EAAMC,OAAO,GAAGxB,cAAcuB,EAAME,MAAM,GAIxCC,CAAW3D,EAAMmD,MAAM9C,MAAhC,QAAkDL,EAAMmD,MAAMS,QC4HrDC,MA1Hf,WACE,MAAwBzC,qBAAxB,mBAAOlB,EAAP,KAAa4D,EAAb,KACA,EAA0B1C,mBAAS,MAAnC,mBAAO+B,EAAP,KAAcY,EAAd,KACA,EAAoC3C,mBAAS,QAA7C,mBAAO4C,EAAP,KAAmBC,EAAnB,KACA,EAA0C7C,mBAAS,SAAnD,mBAAOY,EAAP,KAAsBkC,EAAtB,KAIAC,qBAAU,WAKM3B,SAAS4B,OAAO/B,MAAM,MAE5BgC,SAAQ,SAACD,GAEf,GAAe,qBAAXA,EAA+B,CAEjC,IAAIE,EAAeF,EAAO/B,MAAM,KAChCyB,EAAQQ,EAAa,IACrBL,EAAc,SACdC,EAAiB,QAEjB1B,SAAS+B,KAAKhD,MAAMQ,gBAAkBiC,OACjC,GAAe,oBAAXI,EAA8B,CACvCI,QAAQC,IAAI,WAAYL,GACxB,IAAIE,EAAeF,EAAO/B,MAAM,KAChCyB,EAAQQ,EAAa,IACrBL,EAAcD,GACdE,EAAiBlC,GAEjBQ,SAAS+B,KAAKhD,MAAMQ,gBAAkBiC,OAGtCF,EAAQ,WAET,CAACE,OAIN,IAAM9B,EAAY,SAACwC,EAASrE,GAC1B0D,EAAS,CACPH,IAAKc,EACLrE,KAAMA,IAGRsE,YAAW,WACTZ,EAAS,QACR,MAgDL,OACE,qCAEE,cAAChE,EAAD,CAAQK,WAAW,YAAYF,KAAMA,EAAMW,WAhD5B,WACJ,UAATX,GACF4D,EAAQ,QACRtB,SAAS+B,KAAKhD,MAAMQ,gBAAkBiC,EAEtC9B,EAAU,6BAA8B,WACxCM,SAAS4B,OAAS,kBAClB5B,SAASoC,MAAQ,wBACjBX,EAAc,QACdC,EAAiB,SAEjBW,aAAY,WACVrC,SAASoC,MAAQ,uBAChB,KAEHC,aAAY,WACVrC,SAASoC,MAAQ,8BAChB,QAEHd,EAAQ,SACRtB,SAAS+B,KAAKhD,MAAMQ,gBAAkB,QAEtCG,EAAU,8BAA+B,WACzCM,SAAS4B,OAAS,mBAClB5B,SAASoC,MAAQ,2BAwBkD3D,YAnB7C,WACxB,IAAI6D,EAAetC,SAASC,eAAe,aAAab,MACxDqC,EAAca,GAQd,IAHA,IAAIC,EAAkB,IAClBC,EAA2BF,EAAaG,OAAO,GAE1CvE,EAAI,EAAGA,EAAIsE,EAAyBjC,OAAS,EAAGrC,IACvDqE,GAAmBC,EAAyBE,KAAKC,MAAsB,EAAhBD,KAAKE,WAE9DlB,EAAiBa,MAOf,cAAC,EAAD,CAAO5B,MAAOA,IAIV,cAAC,EAAD,CAAUjB,UAAWA,EAAWT,QAAQ,kCAAkCvB,KAAMA,EAAM8B,cAAeA,QCxGhGqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASC,eAAe,SAM1B4C,M","file":"static/js/main.6832c76a.chunk.js","sourcesContent":["import navbars from \"../navbar_config.json\";\nimport PropTypes from \"prop-types\";\n// import { a } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-sm navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"/\">\n          {props.brand_name}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            {/* <li className=\"nav-item\">\n                <a className=\"nav-a active\" aria-current=\"page\" href=\"/\">Home</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-a\" href=\"/\">About</a>\n              </li> */}\n            {navbars[\"navbars\"].map((navbar, i) => {\n              //   console.log(\"Navbar: \", navbar);\n              return (\n                <li className=\"nav-item\" key={i}>\n                  <a className=\"nav-link\" href={navbar.href}>\n                    {navbar.navname}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n          <form className=\"d-flex\">\n            {/* \n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button> */}\n            <div className={`form-check form-switch text-${props.mode==='light'? 'dark':'light'}`}>\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                id=\"flexSwitchCheckDefault\"\n              onClick={props.toggleMode}/>\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\n                {props.mode==='light'?'Enable dark mode':'Enable light mode'}\n              </label>\n              \n            </div>\n            {props.mode === 'dark'? <input type=\"color\" name=\"colorCode\" id=\"colorCode\" className=\"ms-2\" onChange={props.colorHandle}/>:null}\n          </form>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  brand_name: PropTypes.string,\n};\n\nNavbar.defaultProps = {\n  brand_name: \"Rai Shop\",\n};\n","import { useState } from \"react\";\n\nconst TextForm = (props) => {\n   const [text, setText] = useState('');\n\n   const handleOnChange = (e)=>{\n    // console.log(e.target.value)\n    setText(e.target.value)\n  }\n\n   const handleUppercase = ()=>{\n      // console.log(\"UPPERCASE button was clicked\")\n      if(text !== ''){\n        setText(text.toUpperCase())\n        props.showAlert(\"Changed to UPPERCASE!\",\"success\")\n      } else{\n        props.showAlert(\"Write something first before converting to UPPERCASE!\",\"warning\")\n      }\n   }\n   \n   const handleLowercase = ()=>{      \n      if(text !== ''){\n        setText(text.toLowerCase())\n        props.showAlert(\"Changed to lowercase!\",\"success\")\n      } else{\n        props.showAlert(\"Write something first before converting to lowercase!\",\"warning\")\n      }\n   }\n\n   const handleSpaceRemover = ()=>{\n\n    if(text !== ''){\n      // way1\n      //  setText(text.trim())\n\n      // way2\n      let newText = text.split(/[ ]+/)\n      setText(newText.join(\" \"));\n      // alert('Space removed');\n      props.showAlert(\"Extra spaces have been removed!\",\"success\")\n    } else{\n      props.showAlert(\"Write something first before removing extra spaces!\",\"warning\")\n    }\n    \n   }\n   \n   const handleTextClear = ()=>{\n     setText(\"\");\n     props.showAlert(\"Text box cleared!\",\"success\");\n   }\n\n   const handleTextCopy = ()=>{\n    if(text !== ''){\n      var myTextBox = document.getElementById('myTextBox')\n      myTextBox.select()\n      myTextBox.setSelectionRange(0, 99999); //for mobile\n      navigator.clipboard.writeText(myTextBox.value);\n      props.showAlert(\"Text copied!\",\"success\")\n    } else{\n      props.showAlert(\"Write something first before copy it!\",\"warning\")\n    }     \n   }\n\n  return (\n    <>\n    <div className=\"container my-4 \" style={{color:props.mode === 'dark'? 'white':'black'}}>\n      <h1>{props.heading}</h1>\n      <div className=\"mb-3\">\n        <textarea\n          className=\"form-control\"\n          id=\"myTextBox\"\n          rows=\"8\" placeholder=\"Enter text here\" value={text} onChange={handleOnChange}\n          style={{backgroundColor:props.mode === 'light'? 'white':props.textareaColor, color:props.mode === 'dark'? 'white':'black'}}\n        ></textarea>\n      </div>\n      <div className=\"btn btn-primary mb-3 me-3\" onClick={handleUppercase}>UPPERCASE</div>\n      <div className=\"btn btn-secondary mb-3 me-3\" onClick={handleLowercase}>lowercase</div>\n      <div className=\"btn btn-warning mb-3 me-3\" onClick={handleSpaceRemover}>Remove Whitespace</div>\n      <div className=\"btn btn-info mb-3 me-3\" onClick={handleTextClear}>Clear Text</div>\n      <div className=\"btn btn-danger mb-3 me-3\" onClick={handleTextCopy}>Copy Text</div>\n    </div>\n\n    <div className=\"container my-2\" style={{color:props.mode === 'dark'? 'white':'black'}}>\n      <h1>Your text summary</h1>\n      <p>{text.split(\" \").length<2?0:text.trim().split(\" \").length} words, {text.length} characters</p>\n      <p>{text.split(\" \").length < 2? 0:(0.008 * text.split(\" \").length).toFixed(2)} mins read</p>\n      <h4>{text.length>0? text:'Write something the textbox above to preview here'}</h4>\n    </div>\n    </>\n  );\n};\n\nexport default TextForm;\n","import React from \"react\";\n\nconst Alert = (props) => {\n   const capitalize = (word)=>{\n      const lower = word.toLowerCase();\n      return lower.charAt(0).toUpperCase()+lower.slice(1);\n   }\n  return (\n    props.alert && <div className={`my-3 alert alert-${props.alert.type} alert-dismissible fade show d-inline-block`} align=\"right\" style={{float: 'right'}} role=\"alert\">\n      <strong>{capitalize(props.alert.type)}! </strong>{props.alert.msg}\n    </div>\n  );\n};\n\nexport default Alert;\n","import './App.css';\nimport { useState, useEffect } from 'react';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n// import Contanct from './components/Contanct';\n// import PageNotFound from './components/PageNotFound';\n\n\nfunction App() {\n  const [mode, setMode] = useState(); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const [themeColor, setThemeColor] = useState('grey');\n  const [textareaColor, setTextareaColor] = useState('black')\n\n\n  // console.log(\"document.cookie: \",document.cookie)\n  useEffect(() => {\n    // effect\n    // return () => {\n    //   cleanup\n    // }\n    let cookies = document.cookie.split(\"; \")\n    // console.log(\"Cookies: \", cookies)\n    cookies.forEach((cookie) => {\n      // console.log(\"Cookie: \", cookie)\n      if (cookie === \"navbarmode=light\") {\n        // console.log(\"document.cookie: \", document.cookie)\n        let saved_cookie = cookie.split(\"=\")\n        setMode(saved_cookie[1])\n        setThemeColor('white')\n        setTextareaColor('grey')\n        // console.log(\"saved_cookie[1]: \", saved_cookie[1])\n        document.body.style.backgroundColor = themeColor\n      } else if (cookie === \"navbarmode=dark\") {\n        console.log(\"cookie: \", cookie)\n        let saved_cookie = cookie.split(\"=\")\n        setMode(saved_cookie[1])\n        setThemeColor(themeColor)\n        setTextareaColor(textareaColor)\n        // console.log(\"saved_cookie[1]: \", saved_cookie[1])\n        document.body.style.backgroundColor = themeColor\n      }\n      else {\n        setMode(\"light\")\n      }\n    }, [themeColor])\n  })\n\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = themeColor\n      // document.body.style.color = 'white'\n      showAlert(\"Dark mode has been enabled\", \"success\")\n      document.cookie = \"navbarmode=dark\";\n      document.title = \"TextUtils - Dark Mode\"\n      setThemeColor('grey')\n      setTextareaColor('black')\n\n      setInterval(() => {\n        document.title = \"Dark mode is great\"\n      }, 2000);\n\n      setInterval(() => {\n        document.title = \"Check out Light mode once\"\n      }, 1500);\n    } else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      // document.body.style.color = 'black'\n      showAlert(\"Light mode has been enabled\", \"success\")\n      document.cookie = \"navbarmode=light\";\n      document.title = \"TextUtils - Light Mode\"\n    }\n  }\n\n  // color Handling\n  const colorChangeHandle = () => {\n    let seletedColor = document.getElementById(\"colorCode\").value;\n    setThemeColor(seletedColor)\n\n    // document.body.style.backgroundColor = themeColor\n    // document.cookie =`themeColor=${themeColor}`\n\n    let randomColorCode = '#';\n    let hashRemovedSelectedColor = seletedColor.substr(1)\n\n    for (let i = 1; i < hashRemovedSelectedColor.length + 1; i++) {\n      randomColorCode += hashRemovedSelectedColor[Math.floor(Math.random() * 6)]\n    }\n    setTextareaColor(randomColorCode)\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar brand_name=\"TextUtils\" mode={mode} toggleMode={toggleMode} colorHandle={colorChangeHandle} />\n      <Alert alert={alert} />\n      {/* <Navbar /> */}\n      {/* <Switch> */}\n        {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} textareaColor={textareaColor} />\n        {/* </Route> */}\n        {/* <Route exact path=\"/about\"> */}\n          {/* <About mode={mode}/> */}\n        {/* </Route> */}\n        {/* <Route exact path=\"/contact\"> */}\n          {/* <Contanct mode={mode}/> */}\n        {/* </Route> */}\n        {/* <Route exact> */}\n          {/* <PageNotFound /> */}\n        {/* </Route> */}\n      {/* </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}